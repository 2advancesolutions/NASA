{"version":3,"file":"default-src_app_services_product_service_ts.js","mappings":";;;;;;;;;;;;;;;;;;;AAE8C;AACF;;;AAErC,IAAKE,WAKX;AALD,WAAYA,WAAW;EACrBA,WAAA,eAAW;EACXA,WAAA,iBAAa;EACbA,WAAA,qBAAiB;EACjBA,WAAA,qBAAiB;AACnB,CAAC,EALWA,WAAW,KAAXA,WAAW;AAUjB,MAAOC,WAAW;EAEtBC,YAAoBC,UAAsB;IAAtB,KAAAA,UAAU,GAAVA,UAAU;IADX,KAAAC,SAAS,GAAG,EAAE;EACa;EACvCC,GAAGA,CAAIC,GAAW;IACvB,OAAO,IAAI,CAACH,UAAU,CACnBE,GAAG,CAAI,IAAI,CAACD,SAAS,GAAGE,GAAG,CAAC,CAC5BC,IAAI,CAACR,0DAAU,CAAC,IAAI,CAACS,YAAY,CAAC,CAAC;EACxC;EACOC,OAAOA,CAAIH,GAAW,EAAEI,EAAmB;IAChD,OAAO,IAAI,CAACP,UAAU,CACnBE,GAAG,CAAI,IAAI,CAACD,SAAS,GAAGE,GAAG,GAAGI,EAAE,CAAC,CACjCH,IAAI,CAACR,0DAAU,CAAC,IAAI,CAACS,YAAY,CAAC,CAAC;EACxC;EACOG,IAAIA,CAAIL,GAAW,EAAEM,GAAM;IAChC,OAAO,IAAI,CAACT,UAAU,CACnBQ,IAAI,CAAI,IAAI,CAACP,SAAS,GAAGE,GAAG,EAAEM,GAAG,CAAC,CAClCL,IAAI,CAACR,0DAAU,CAAC,IAAI,CAACS,YAAY,CAAC,CAAC;EACxC;EACOK,MAAMA,CAAIH,EAAmB,EAAEE,GAAM,EAAEN,GAAW;IACvD,OAAO,IAAI,CAACH,UAAU,CACnBW,GAAG,CAAI,IAAI,CAACV,SAAS,GAAGE,GAAG,GAAGI,EAAE,EAAEE,GAAG,CAAC,CACtCL,IAAI,CAACR,0DAAU,CAAC,IAAI,CAACS,YAAY,CAAC,CAAC;EACxC;EACOO,MAAMA,CAAIL,EAAmB,EAAEJ,GAAW;IAC/C,OAAO,IAAI,CAACH,UAAU,CACnBY,MAAM,CAAI,IAAI,CAACX,SAAS,GAAGE,GAAG,GAAGI,EAAE,CAAC,CACpCH,IAAI,CAACR,0DAAU,CAAC,IAAI,CAACS,YAAY,CAAC,CAAC;EACxC;EACQA,YAAYA,CAACQ,KAAU;IAC7B,IAAIC,YAAY,GAAG,EAAE;IACrB,IAAID,KAAK,CAACA,KAAK,YAAYE,UAAU,EAAE;MACrCD,YAAY,GAAGD,KAAK,CAACA,KAAK;KAC3B,MAAM;MACLC,YAAY,GAAGD,KAAK,CAACA,KAAK,CAACG,GAAG;;IAEhC,OAAOrB,gDAAU,CAACmB,YAAY,CAAC;EACjC;;SApCWhB,WAAW;;mBAAXA,MAAW,EAAAmB,sDAAA,CAAAE,4DAAA;AAAA;;SAAXrB,MAAW;EAAAuB,OAAA,EAAXvB,MAAW,CAAAwB,IAAA;EAAAC,UAAA,EAFV;AAAM;;;;;;;;;;;;;;;;;;;;;;ACZuC;AAEJ;AAEI;AACL;;;AAMhD,MAAOO,cAAc;EAEzB/B,YAAoBgC,IAAiB;IAAjB,KAAAA,IAAI,GAAJA,IAAI;IAEhB,KAAAC,UAAU,GAAG,WAAWJ,qEAAW,CAACK,cAAc,gCAAgC;IAClF,KAAAC,iBAAiB,GAAG,WAAWN,qEAAW,CAACK,cAAc,iBAAiB;IAElF;IACA,KAAAE,QAAQ,GAAGN,oEAAQ,CAAC,IAAI,CAACO,YAAY,EAAE,CAAC;IACxC,KAAAC,cAAc,GAAGb,qDAAM,CAAkBc,SAAS,CAAC;EAPV;EASzC;EACAF,YAAYA,CAAA;IACV,OAAO,IAAI,CAACL,IAAI,CAAC7B,GAAG,CAAgC,IAAI,CAAC8B,UAAU,CAAC,CACjE5B,IAAI,CAAEqB,mDAAG,CAACc,IAAI,IAAIA,IAAI,CAACC,OAAO,CAACC,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,YAAY,KAAK,QAAQ,CAAC,CAAC,EAC7ElB,mDAAG,CAACc,IAAI,IAAIA,IAAI,CAACK,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK,IAAIC,IAAI,CAACD,CAAC,CAACE,iBAAiB,CAAC,CAACC,OAAO,EAAE,GAAG,IAAIF,IAAI,CAACF,CAAC,CAACG,iBAAiB,CAAC,CAACC,OAAO,EAAE,CAAC,CAAC,EACnHtB,mDAAG,CAACY,IAAI,IAAI,IAAI,CAACW,MAAM,CAACX,IAAI,CAAC,CAAC,EAC9Bb,2DAAW,CAAC,CAAC,CAAC,CACf;EACL;EACAyB,kBAAkBA,CAAC5C,EAAU;IAC3B,OAAO,IAAI,CAACwB,IAAI,CAACzB,OAAO,CAAmB,IAAI,CAAC4B,iBAAiB,EAAE3B,EAAE,CAAC,CACnEH,IAAI,CAACuB,mDAAG,CAACY,IAAI,IAAG;MACf,IAAI,CAACF,cAAc,CAACe,GAAG,CAACb,IAAI,CAAC;MAC7B,IAAI,CAACW,MAAM,CAACX,IAAI,CAAC;IACnB,CAAC,CAAC,EACAb,2DAAW,CAAC,CAAC,CAAC,CAAC;EACrB;EAEAwB,MAAMA,CAACX,IAAS;IACd;IACAc,OAAO,CAACC,IAAI,CAACC,IAAI,CAACC,SAAS,CAACjB,IAAI,CAAC,CAAC;EACpC;;SAhCWT,cAAc;;mBAAdA,MAAc,EAAAb,sDAAA,CAAAE,sDAAA;AAAA;;SAAdW,MAAc;EAAAT,OAAA,EAAdS,MAAc,CAAAR,IAAA;EAAAC,UAAA,EAFb;AAAM;;;;;;;;;;;;;;;;ACVgB;AACsC;AACnE,MAAMoC,aAAa,SAASF,6CAAO,CAAC;EACvC1D,WAAWA,CAAC6D,WAAW,GAAGC,QAAQ,EAAEC,WAAW,GAAGD,QAAQ,EAAEE,kBAAkB,GAAGL,mFAAqB,EAAE;IACpG,KAAK,CAAC,CAAC;IACP,IAAI,CAACE,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACE,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACC,kBAAkB,GAAGA,kBAAkB;IAC5C,IAAI,CAACC,OAAO,GAAG,EAAE;IACjB,IAAI,CAACC,mBAAmB,GAAG,IAAI;IAC/B,IAAI,CAACA,mBAAmB,GAAGH,WAAW,KAAKD,QAAQ;IACnD,IAAI,CAACD,WAAW,GAAGM,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEP,WAAW,CAAC;IAC3C,IAAI,CAACE,WAAW,GAAGI,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEL,WAAW,CAAC;EAC/C;EACAM,IAAIA,CAACC,KAAK,EAAE;IACR,MAAM;MAAEC,SAAS;MAAEN,OAAO;MAAEC,mBAAmB;MAAEF,kBAAkB;MAAED;IAAY,CAAC,GAAG,IAAI;IACzF,IAAI,CAACQ,SAAS,EAAE;MACZN,OAAO,CAACO,IAAI,CAACF,KAAK,CAAC;MACnB,CAACJ,mBAAmB,IAAID,OAAO,CAACO,IAAI,CAACR,kBAAkB,CAACS,GAAG,CAAC,CAAC,GAAGV,WAAW,CAAC;IAChF;IACA,IAAI,CAACW,WAAW,CAAC,CAAC;IAClB,KAAK,CAACL,IAAI,CAACC,KAAK,CAAC;EACrB;EACAK,UAAUA,CAACC,UAAU,EAAE;IACnB,IAAI,CAACC,cAAc,CAAC,CAAC;IACrB,IAAI,CAACH,WAAW,CAAC,CAAC;IAClB,MAAMI,YAAY,GAAG,IAAI,CAACC,eAAe,CAACH,UAAU,CAAC;IACrD,MAAM;MAAEV,mBAAmB;MAAED;IAAQ,CAAC,GAAG,IAAI;IAC7C,MAAMe,IAAI,GAAGf,OAAO,CAACgB,KAAK,CAAC,CAAC;IAC5B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,IAAI,CAACP,UAAU,CAACQ,MAAM,EAAEF,CAAC,IAAIhB,mBAAmB,GAAG,CAAC,GAAG,CAAC,EAAE;MACrFU,UAAU,CAACP,IAAI,CAACW,IAAI,CAACE,CAAC,CAAC,CAAC;IAC5B;IACA,IAAI,CAACG,uBAAuB,CAACT,UAAU,CAAC;IACxC,OAAOE,YAAY;EACvB;EACAJ,WAAWA,CAAA,EAAG;IACV,MAAM;MAAEb,WAAW;MAAEG,kBAAkB;MAAEC,OAAO;MAAEC;IAAoB,CAAC,GAAG,IAAI;IAC9E,MAAMoB,kBAAkB,GAAG,CAACpB,mBAAmB,GAAG,CAAC,GAAG,CAAC,IAAIL,WAAW;IACtEA,WAAW,GAAGC,QAAQ,IAAIwB,kBAAkB,GAAGrB,OAAO,CAACkB,MAAM,IAAIlB,OAAO,CAACsB,MAAM,CAAC,CAAC,EAAEtB,OAAO,CAACkB,MAAM,GAAGG,kBAAkB,CAAC;IACvH,IAAI,CAACpB,mBAAmB,EAAE;MACtB,MAAMO,GAAG,GAAGT,kBAAkB,CAACS,GAAG,CAAC,CAAC;MACpC,IAAIe,IAAI,GAAG,CAAC;MACZ,KAAK,IAAIN,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjB,OAAO,CAACkB,MAAM,IAAIlB,OAAO,CAACiB,CAAC,CAAC,IAAIT,GAAG,EAAES,CAAC,IAAI,CAAC,EAAE;QAC7DM,IAAI,GAAGN,CAAC;MACZ;MACAM,IAAI,IAAIvB,OAAO,CAACsB,MAAM,CAAC,CAAC,EAAEC,IAAI,GAAG,CAAC,CAAC;IACvC;EACJ;AACJ;;;;;;;;;;;;;;;;AChDiD;AACjB;AACzB,SAAS7D,WAAWA,CAAC+D,kBAAkB,EAAEC,UAAU,EAAEC,SAAS,EAAE;EACnE,IAAIC,UAAU;EACd,IAAIC,QAAQ,GAAG,KAAK;EACpB,IAAIJ,kBAAkB,IAAI,OAAOA,kBAAkB,KAAK,QAAQ,EAAE;IAC9D,CAAC;MAAEG,UAAU,GAAG/B,QAAQ;MAAE6B,UAAU,GAAG7B,QAAQ;MAAEgC,QAAQ,GAAG,KAAK;MAAEF;IAAU,CAAC,GAAGF,kBAAkB;EACvG,CAAC,MACI;IACDG,UAAU,GAAIH,kBAAkB,KAAK,IAAI,IAAIA,kBAAkB,KAAK,KAAK,CAAC,GAAGA,kBAAkB,GAAG5B,QAAS;EAC/G;EACA,OAAO2B,6CAAK,CAAC;IACTM,SAAS,EAAEA,CAAA,KAAM,IAAInC,yDAAa,CAACiC,UAAU,EAAEF,UAAU,EAAEC,SAAS,CAAC;IACrEI,YAAY,EAAE,IAAI;IAClBC,eAAe,EAAE,KAAK;IACtBC,mBAAmB,EAAEJ;EACzB,CAAC,CAAC;AACN;;;;;;;;;;;;;;ACjBO,MAAMnC,qBAAqB,GAAG;EACjCc,GAAGA,CAAA,EAAG;IACF,OAAO,CAACd,qBAAqB,CAACwC,QAAQ,IAAInD,IAAI,EAAEyB,GAAG,CAAC,CAAC;EACzD,CAAC;EACD0B,QAAQ,EAAE5D;AACd,CAAC;;;;;;;;;;;;;;;;;;;;ACLD;AACA;AACA;AACA;AACA;;AAEqK;AACpH;AACN;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASyE,kBAAkBA,CAACC,UAAU,EAAE;EACpC,IAAI,CAACA,UAAU,EAAE;IACbb,uEAAwB,CAACY,kBAAkB,CAAC;IAC5CC,UAAU,GAAGZ,qDAAM,CAACC,qDAAU,CAAC;EACnC;EACA,MAAMY,UAAU,GAAG,IAAIJ,4CAAU,CAACK,QAAQ,IAAI;IAC1C,MAAMC,YAAY,GAAGH,UAAU,CAACI,SAAS,CAACF,QAAQ,CAAC9C,IAAI,CAACiD,IAAI,CAACH,QAAQ,CAAC,CAAC;IACvE,OAAOC,YAAY;EACvB,CAAC,CAAC;EACF,OAAQG,MAAM,IAAK;IACf,OAAOA,MAAM,CAAClH,IAAI,CAAC0G,yDAAS,CAACG,UAAU,CAAC,CAAC;EAC7C,CAAC;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASM,YAAYA,CAACD,MAAM,EAAEE,OAAO,EAAE;EACnC,CAACA,OAAO,EAAEC,QAAQ,IAAItB,uEAAwB,CAACoB,YAAY,CAAC;EAC5D,MAAME,QAAQ,GAAGD,OAAO,EAAEC,QAAQ,IAAIrB,qDAAM,CAACE,mDAAQ,CAAC;EACtD,MAAMoB,OAAO,GAAG,IAAI/D,+CAAa,CAAC,CAAC,CAAC;EACpC,MAAMgE,OAAO,GAAGpB,qDAAM,CAAC,MAAM;IACzB,IAAIlC,KAAK;IACT,IAAI;MACAA,KAAK,GAAGiD,MAAM,CAAC,CAAC;IACpB,CAAC,CACD,OAAOM,GAAG,EAAE;MACRnB,wDAAW,CAAC,MAAMiB,OAAO,CAAC7G,KAAK,CAAC+G,GAAG,CAAC,CAAC;MACrC;IACJ;IACAnB,wDAAW,CAAC,MAAMiB,OAAO,CAACtD,IAAI,CAACC,KAAK,CAAC,CAAC;EAC1C,CAAC,EAAE;IAAEoD,QAAQ;IAAEI,aAAa,EAAE;EAAK,CAAC,CAAC;EACrCJ,QAAQ,CAACvH,GAAG,CAACmG,qDAAU,CAAC,CAACe,SAAS,CAAC,MAAM;IACrCO,OAAO,CAACG,OAAO,CAAC,CAAC;IACjBJ,OAAO,CAACK,QAAQ,CAAC,CAAC;EACtB,CAAC,CAAC;EACF,OAAOL,OAAO,CAACM,YAAY,CAAC,CAAC;AACjC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,2BAA2B,GAAG,2BAA2B;AAC/D;AACA;AACA;AACA,MAAMC,gBAAgB,GAAG,8BAA8B;;AAEvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,YAAY,SAASC,KAAK,CAAC;EAC7BrI,WAAWA,CAACsI,IAAI,EAAEC,OAAO,EAAE;IACvB,KAAK,CAACC,kBAAkB,CAACF,IAAI,EAAEC,OAAO,CAAC,CAAC;IACxC,IAAI,CAACD,IAAI,GAAGA,IAAI;EACpB;AACJ;AACA;AACA;AACA;AACA;AACA,SAASE,kBAAkBA,CAACF,IAAI,EAAEC,OAAO,EAAE;EACvC;EACA;EACA;EACA,MAAME,QAAQ,GAAI,MAAKtE,IAAI,CAACuE,GAAG,CAACJ,IAAI,CAAE,EAAC;EACvC,IAAIvH,YAAY,GAAI,GAAE0H,QAAS,GAAEF,OAAO,GAAG,IAAI,GAAGA,OAAO,GAAG,EAAG,EAAC;EAChE,IAAII,SAAS,IAAIL,IAAI,GAAG,CAAC,EAAE;IACvB,MAAMM,kBAAkB,GAAG,CAAC7H,YAAY,CAAC8H,KAAK,CAAC,YAAY,CAAC;IAC5D,MAAMC,SAAS,GAAGF,kBAAkB,GAAG,GAAG,GAAG,EAAE;IAC/C7H,YAAY,GACP,GAAEA,YAAa,GAAE+H,SAAU,iBAAgBZ,2BAA4B,IAAGO,QAAS,EAAC;EAC7F;EACA,OAAO1H,YAAY;AACvB;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAMgI,MAAM,GAAGC,MAAM,CAAC,QAAQ,CAAC;AAC/B;AACA;AACA;AACA;AACA;AACA,SAASC,QAAQA,CAAC3E,KAAK,EAAE;EACrB,OAAO,OAAOA,KAAK,KAAK,UAAU,IAAIA,KAAK,CAACyE,MAAM,CAAC,KAAKxG,SAAS;AACrE;AACA;AACA;AACA;AACA;AACA,SAAS2G,wBAAwBA,CAACC,IAAI,EAAEC,EAAE,EAAEC,QAAQ,GAAG,CAAC,CAAC,EAAE;EACvDD,EAAE,CAACL,MAAM,CAAC,GAAGI,IAAI;EACjB;EACA,OAAOG,MAAM,CAACC,MAAM,CAACH,EAAE,EAAEC,QAAQ,CAAC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASG,aAAaA,CAAC1G,CAAC,EAAEC,CAAC,EAAE;EACzB;EACA;EACA;EACA;EACA;EACA,OAAO,CAACD,CAAC,KAAK,IAAI,IAAI,OAAOA,CAAC,KAAK,QAAQ,KAAKwG,MAAM,CAACG,EAAE,CAAC3G,CAAC,EAAEC,CAAC,CAAC;AACnE;AAEA,MAAM2G,OAAO,GAAGC,UAAU;AAE1B,SAASC,0BAA0BA,CAAA,EAAG;EAClC,MAAMC,cAAc,GAAG,OAAOC,QAAQ,KAAK,WAAW,GAAGA,QAAQ,CAACC,QAAQ,CAAC,CAAC,GAAG,EAAE;EACjF,MAAMC,WAAW,GAAG;IAChBC,iBAAiB,EAAEJ,cAAc,CAACK,OAAO,CAAC,6BAA6B,CAAC,IAAI,CAAC,CAAC;IAC9EC,eAAe,EAAE,CAAC;IAClBC,KAAK,EAAE,CAAC;IACRC,KAAK,EAAE,CAAC;IACRC,sBAAsB,EAAE,CAAC;IACzBC,eAAe,EAAE,CAAC;IAClBC,qBAAqB,EAAE,CAAC;IACxBC,wBAAwB,EAAE,CAAC;IAC3BC,oBAAoB,EAAE,CAAC;IACvBC,uBAAuB,EAAE,CAAC;IAC1BC,mBAAmB,EAAE,CAAC;IACtBC,oBAAoB,EAAE,CAAC;IACvBC,gBAAgB,EAAE,CAAC;IACnBC,mBAAmB,EAAE,CAAC;IACtBC,gBAAgB,EAAE,CAAC;IACnBC,mBAAmB,EAAE,CAAC;IACtBC,eAAe,EAAE,CAAC;IAClBC,mBAAmB,EAAE,CAAC;IACtBC,gBAAgB,EAAE,CAAC;IACnBC,kBAAkB,EAAE,CAAC;IACrBC,mBAAmB,EAAE,CAAC;IACtBC,oBAAoB,EAAE,CAAC;IACvBC,qBAAqB,EAAE,CAAC;IACxBC,aAAa,EAAE,CAAC;IAChBC,kBAAkB,EAAE,CAAC;IACrBC,sBAAsB,EAAE,CAAC;IACzBC,0BAA0B,EAAE,CAAC;IAC7BC,0BAA0B,EAAE;EAChC,CAAC;EACD;EACA,MAAMC,kBAAkB,GAAGjC,cAAc,CAACK,OAAO,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;EAC3ER,OAAO,CAAC,WAAW,CAAC,GAAGoC,kBAAkB,IAAI9B,WAAW;EACxD,OAAOA,WAAW;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS+B,aAAaA,CAAA,EAAG;EACrB;EACA;EACA;EACA;EACA,IAAI,OAAOpD,SAAS,KAAK,WAAW,IAAIA,SAAS,EAAE;IAC/C,IAAI,OAAOA,SAAS,KAAK,QAAQ,EAAE;MAC/BiB,0BAA0B,CAAC,CAAC;IAChC;IACA,OAAO,OAAOjB,SAAS,KAAK,WAAW,IAAI,CAAC,CAACA,SAAS;EAC1D;EACA,OAAO,KAAK;AAChB;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAMqD,QAAQ,CAAC;EACXhM,WAAWA,CAACiM,GAAG,EAAE;IACb,IAAI,CAACA,GAAG,GAAGA,GAAG;EAClB;EACAC,KAAKA,CAAA,EAAG;IACJ,OAAO,IAAI,CAACD,GAAG;EACnB;AACJ;AACA;AACA;AACA;AACA,IAAIE,WAAW,GAAGzC,OAAO,CAAC,SAAS,CAAC,IAAIsC,QAAQ;AAChD,SAASI,UAAUA,CAAC9H,KAAK,EAAE;EACvB,IAAI,OAAOqE,SAAS,KAAK,WAAW,IAAIA,SAAS,IAAIwD,WAAW,KAAK5J,SAAS,EAAE;IAC5E,MAAM,IAAI8F,KAAK,CAAE,6DAA4D,CAAC;EAClF;EACA,OAAO,IAAI8D,WAAW,CAAC7H,KAAK,CAAC;AACjC;AACA,SAAS+H,uBAAuBA,CAACC,IAAI,EAAE;EACnC;EACA;AAAA;;AAGJ;AACA;AACA;AACA;AACA,IAAIC,eAAe,GAAG,CAAC;AACvB;AACA;AACA;AACA;AACA,IAAIC,cAAc,GAAG,IAAI;AACzB;AACA;AACA;AACA,IAAIC,mBAAmB,GAAG,KAAK;AAC/B,SAASC,iBAAiBA,CAACC,QAAQ,EAAE;EACjC,MAAMC,IAAI,GAAGJ,cAAc;EAC3BA,cAAc,GAAGG,QAAQ;EACzB,OAAOC,IAAI;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,YAAY,CAAC;EACf7M,WAAWA,CAAA,EAAG;IACV,IAAI,CAACQ,EAAE,GAAG+L,eAAe,EAAE;IAC3B;AACR;AACA;IACQ,IAAI,CAACN,GAAG,GAAGG,UAAU,CAAC,IAAI,CAAC;IAC3B;AACR;AACA;IACQ,IAAI,CAACU,SAAS,GAAG,IAAIC,GAAG,CAAC,CAAC;IAC1B;AACR;AACA;IACQ,IAAI,CAACC,SAAS,GAAG,IAAID,GAAG,CAAC,CAAC;IAC1B;AACR;AACA;AACA;IACQ,IAAI,CAACE,eAAe,GAAG,CAAC;IACxB;AACR;AACA;AACA;IACQ,IAAI,CAACC,YAAY,GAAG,CAAC;EACzB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIC,8BAA8BA,CAAA,EAAG;IAC7B,KAAK,MAAM,CAACC,UAAU,EAAEC,IAAI,CAAC,IAAI,IAAI,CAACP,SAAS,EAAE;MAC7C,MAAMQ,QAAQ,GAAGD,IAAI,CAACE,YAAY,CAACrB,KAAK,CAAC,CAAC;MAC1C;MACA;MACA,IAAIoB,QAAQ,IAAI,IAAI,IAAID,IAAI,CAACG,iBAAiB,KAAK,IAAI,CAACP,eAAe,EAAE;QACrE;QACA,IAAI,CAACH,SAAS,CAACjM,MAAM,CAACuM,UAAU,CAAC;QACjCE,QAAQ,EAAEN,SAAS,CAACnM,MAAM,CAAC,IAAI,CAACL,EAAE,CAAC;QACnC;MACJ;MACA,IAAI8M,QAAQ,CAACG,kBAAkB,CAACJ,IAAI,CAACK,gBAAgB,CAAC,EAAE;QACpD;QACA,OAAO,IAAI;MACf;IACJ;IACA;IACA;IACA,OAAO,KAAK;EAChB;EACA;AACJ;AACA;EACIC,sBAAsBA,CAAA,EAAG;IACrB;IACA,MAAMf,IAAI,GAAGH,mBAAmB;IAChCA,mBAAmB,GAAG,IAAI;IAC1B,IAAI;MACA,KAAK,MAAM,CAACmB,UAAU,EAAEP,IAAI,CAAC,IAAI,IAAI,CAACL,SAAS,EAAE;QAC7C,MAAML,QAAQ,GAAGU,IAAI,CAACQ,YAAY,CAAC3B,KAAK,CAAC,CAAC;QAC1C;QACA;QACA,IAAIS,QAAQ,IAAI,IAAI,IAAIA,QAAQ,CAACM,eAAe,KAAKI,IAAI,CAACG,iBAAiB,EAAE;UACzE,IAAI,CAACR,SAAS,CAACnM,MAAM,CAAC+M,UAAU,CAAC;UACjCjB,QAAQ,EAAEG,SAAS,CAACjM,MAAM,CAAC,IAAI,CAACL,EAAE,CAAC;UACnC;QACJ;QACAmM,QAAQ,CAACmB,kCAAkC,CAAC,CAAC;MACjD;IACJ,CAAC,SACO;MACJrB,mBAAmB,GAAGG,IAAI;IAC9B;EACJ;EACA;AACJ;AACA;EACImB,gBAAgBA,CAAA,EAAG;IACf,IAAItB,mBAAmB,EAAE;MACrB,MAAM,IAAIpE,KAAK,CAAC,OAAOM,SAAS,KAAK,WAAW,IAAIA,SAAS,GACxD,wDAAuD,GACxD,EAAE,CAAC;IACX;IACA,IAAI6D,cAAc,KAAK,IAAI,EAAE;MACzB;IACJ;IACA;IACA,IAAIa,IAAI,GAAGb,cAAc,CAACM,SAAS,CAAC3M,GAAG,CAAC,IAAI,CAACK,EAAE,CAAC;IAChD,IAAI6M,IAAI,KAAK9K,SAAS,EAAE;MACpB8K,IAAI,GAAG;QACHQ,YAAY,EAAErB,cAAc,CAACP,GAAG;QAChCsB,YAAY,EAAE,IAAI,CAACtB,GAAG;QACtByB,gBAAgB,EAAE,IAAI,CAACR,YAAY;QACnCM,iBAAiB,EAAEhB,cAAc,CAACS;MACtC,CAAC;MACDT,cAAc,CAACM,SAAS,CAACzJ,GAAG,CAAC,IAAI,CAAC7C,EAAE,EAAE6M,IAAI,CAAC;MAC3C,IAAI,CAACL,SAAS,CAAC3J,GAAG,CAACmJ,cAAc,CAAChM,EAAE,EAAE6M,IAAI,CAAC;IAC/C,CAAC,MACI;MACDA,IAAI,CAACK,gBAAgB,GAAG,IAAI,CAACR,YAAY;MACzCG,IAAI,CAACG,iBAAiB,GAAGhB,cAAc,CAACS,eAAe;IAC3D;EACJ;EACA;AACJ;AACA;EACI,IAAIe,YAAYA,CAAA,EAAG;IACf,OAAO,IAAI,CAAClB,SAAS,CAACmB,IAAI,GAAG,CAAC;EAClC;EACA;AACJ;AACA;AACA;EACI,IAAIC,sBAAsBA,CAAA,EAAG;IACzB,OAAO1B,cAAc,EAAE2B,yBAAyB,KAAK,KAAK;EAC9D;EACA;AACJ;AACA;AACA;AACA;EACIV,kBAAkBA,CAACW,oBAAoB,EAAE;IACrC;IACA;IACA,IAAI,IAAI,CAAClB,YAAY,KAAKkB,oBAAoB,EAAE;MAC5C,OAAO,IAAI;IACf;IACA;IACA,IAAI,CAACC,4BAA4B,CAAC,CAAC;IACnC;IACA,OAAO,IAAI,CAACnB,YAAY,KAAKkB,oBAAoB;EACrD;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASxH,QAAQA,CAAC0H,WAAW,EAAE7G,OAAO,EAAE;EACpC,MAAM0B,IAAI,GAAG,IAAIoF,YAAY,CAACD,WAAW,EAAE7G,OAAO,EAAE+G,KAAK,IAAIhF,aAAa,CAAC;EAC3E;EACA;EACA,OAAON,wBAAwB,CAACC,IAAI,EAAEA,IAAI,CAAC1H,MAAM,CAAC6F,IAAI,CAAC6B,IAAI,CAAC,CAAC;AACjE;AACA;AACA;AACA;AACA;AACA,MAAMsF,KAAK,GAAGzF,MAAM,CAAC,OAAO,CAAC;AAC7B;AACA;AACA;AACA;AACA;AACA,MAAM0F,SAAS,GAAG1F,MAAM,CAAC,WAAW,CAAC;AACrC;AACA;AACA;AACA;AACA;AACA,MAAM2F,OAAO,GAAG3F,MAAM,CAAC,SAAS,CAAC;AACjC;AACA;AACA;AACA;AACA;AACA,MAAMuF,YAAY,SAAS1B,YAAY,CAAC;EACpC7M,WAAWA,CAACsO,WAAW,EAAEE,KAAK,EAAE;IAC5B,KAAK,CAAC,CAAC;IACP,IAAI,CAACF,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACE,KAAK,GAAGA,KAAK;IAClB;AACR;AACA;AACA;AACA;IACQ,IAAI,CAAClK,KAAK,GAAGmK,KAAK;IAClB;AACR;AACA;AACA;IACQ,IAAI,CAAC3N,KAAK,GAAG,IAAI;IACjB;AACR;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAAC8N,KAAK,GAAG,IAAI;IACjB,IAAI,CAACT,yBAAyB,GAAG,KAAK;EAC1C;EACAL,kCAAkCA,CAAA,EAAG;IACjC,IAAI,IAAI,CAACc,KAAK,EAAE;MACZ;MACA;IACJ;IACA;IACA,IAAI,CAACA,KAAK,GAAG,IAAI;IACjB;IACA,IAAI,CAACjB,sBAAsB,CAAC,CAAC;EACjC;EACAU,4BAA4BA,CAAA,EAAG;IAC3B,IAAI,CAAC,IAAI,CAACO,KAAK,EAAE;MACb;MACA;IACJ;IACA;IACA,IAAI,IAAI,CAACtK,KAAK,KAAKmK,KAAK,IAAI,IAAI,CAACnK,KAAK,KAAKoK,SAAS,IAChD,CAAC,IAAI,CAACvB,8BAA8B,CAAC,CAAC,EAAE;MACxC;MACA;MACA;MACA,IAAI,CAACyB,KAAK,GAAG,KAAK;MAClB;IACJ;IACA;IACA;IACA,IAAI,CAACC,cAAc,CAAC,CAAC;EACzB;EACAA,cAAcA,CAAA,EAAG;IACb,IAAI,IAAI,CAACvK,KAAK,KAAKoK,SAAS,EAAE;MAC1B;MACA,MAAM,IAAIrG,KAAK,CAAC,iCAAiC,CAAC;IACtD;IACA,MAAMyG,QAAQ,GAAG,IAAI,CAACxK,KAAK;IAC3B,IAAI,CAACA,KAAK,GAAGoK,SAAS;IACtB;IACA,IAAI,CAACzB,eAAe,EAAE;IACtB,MAAM8B,YAAY,GAAGrC,iBAAiB,CAAC,IAAI,CAAC;IAC5C,IAAIsC,QAAQ;IACZ,IAAI;MACAA,QAAQ,GAAG,IAAI,CAACV,WAAW,CAAC,CAAC;IACjC,CAAC,CACD,OAAOzG,GAAG,EAAE;MACRmH,QAAQ,GAAGL,OAAO;MAClB,IAAI,CAAC7N,KAAK,GAAG+G,GAAG;IACpB,CAAC,SACO;MACJ6E,iBAAiB,CAACqC,YAAY,CAAC;IACnC;IACA,IAAI,CAACH,KAAK,GAAG,KAAK;IAClB,IAAIE,QAAQ,KAAKL,KAAK,IAAIK,QAAQ,KAAKH,OAAO,IAAIK,QAAQ,KAAKL,OAAO,IAClE,IAAI,CAACH,KAAK,CAACM,QAAQ,EAAEE,QAAQ,CAAC,EAAE;MAChC;MACA;MACA,IAAI,CAAC1K,KAAK,GAAGwK,QAAQ;MACrB;IACJ;IACA,IAAI,CAACxK,KAAK,GAAG0K,QAAQ;IACrB,IAAI,CAAC9B,YAAY,EAAE;EACvB;EACAzL,MAAMA,CAAA,EAAG;IACL;IACA,IAAI,CAAC4M,4BAA4B,CAAC,CAAC;IACnC;IACA,IAAI,CAACN,gBAAgB,CAAC,CAAC;IACvB,IAAI,IAAI,CAACzJ,KAAK,KAAKqK,OAAO,EAAE;MACxB,MAAM,IAAI,CAAC7N,KAAK;IACpB;IACA,OAAO,IAAI,CAACwD,KAAK;EACrB;AACJ;AAEA,SAAS2K,iBAAiBA,CAAA,EAAG;EACzB,MAAM,IAAI5G,KAAK,CAAC,CAAC;AACrB;AACA,IAAI6G,gCAAgC,GAAGD,iBAAiB;AACxD,SAASE,8BAA8BA,CAAA,EAAG;EACtCD,gCAAgC,CAAC,CAAC;AACtC;AACA,SAASE,iCAAiCA,CAAChG,EAAE,EAAE;EAC3C8F,gCAAgC,GAAG9F,EAAE;AACzC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIiG,eAAe,GAAG,IAAI;AAC1B,MAAMC,kBAAkB,SAASzC,YAAY,CAAC;EAC1C7M,WAAWA,CAACsE,KAAK,EAAEkK,KAAK,EAAE;IACtB,KAAK,CAAC,CAAC;IACP,IAAI,CAAClK,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACkK,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACL,yBAAyB,GAAG,KAAK;EAC1C;EACAL,kCAAkCA,CAAA,EAAG;IACjC;EAAA;EAEJO,4BAA4BA,CAAA,EAAG;IAC3B;EAAA;EAEJ;AACJ;AACA;AACA;AACA;AACA;AACA;EACIhL,GAAGA,CAAC2L,QAAQ,EAAE;IACV,IAAI,CAAC,IAAI,CAACd,sBAAsB,EAAE;MAC9BiB,8BAA8B,CAAC,CAAC;IACpC;IACA,IAAI,CAAC,IAAI,CAACX,KAAK,CAAC,IAAI,CAAClK,KAAK,EAAE0K,QAAQ,CAAC,EAAE;MACnC,IAAI,CAAC1K,KAAK,GAAG0K,QAAQ;MACrB,IAAI,CAAC9B,YAAY,EAAE;MACnB,IAAI,CAACS,sBAAsB,CAAC,CAAC;MAC7B0B,eAAe,GAAG,CAAC;IACvB;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;EACI1O,MAAMA,CAAC4O,OAAO,EAAE;IACZ,IAAI,CAAC,IAAI,CAACrB,sBAAsB,EAAE;MAC9BiB,8BAA8B,CAAC,CAAC;IACpC;IACA,IAAI,CAAC9L,GAAG,CAACkM,OAAO,CAAC,IAAI,CAACjL,KAAK,CAAC,CAAC;EACjC;EACA;AACJ;AACA;EACIkL,MAAMA,CAACC,OAAO,EAAE;IACZ,IAAI,CAAC,IAAI,CAACvB,sBAAsB,EAAE;MAC9BiB,8BAA8B,CAAC,CAAC;IACpC;IACA;IACAM,OAAO,CAAC,IAAI,CAACnL,KAAK,CAAC;IACnB,IAAI,CAAC4I,YAAY,EAAE;IACnB,IAAI,CAACS,sBAAsB,CAAC,CAAC;IAC7B0B,eAAe,GAAG,CAAC;EACvB;EACAK,UAAUA,CAAA,EAAG;IACT,IAAI,IAAI,CAACC,cAAc,KAAKpN,SAAS,EAAE;MACnC,IAAI,CAACoN,cAAc,GAAGzG,wBAAwB,CAAC,IAAI,EAAE,MAAM,IAAI,CAACzH,MAAM,CAAC,CAAC,CAAC;IAC7E;IACA,OAAO,IAAI,CAACkO,cAAc;EAC9B;EACAlO,MAAMA,CAAA,EAAG;IACL,IAAI,CAACsM,gBAAgB,CAAC,CAAC;IACvB,OAAO,IAAI,CAACzJ,KAAK;EACrB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,SAAS7C,MAAMA,CAACmO,YAAY,EAAEnI,OAAO,EAAE;EACnC,MAAMoI,UAAU,GAAG,IAAIP,kBAAkB,CAACM,YAAY,EAAEnI,OAAO,EAAE+G,KAAK,IAAIhF,aAAa,CAAC;EACxF;EACA;EACA,MAAMsG,QAAQ,GAAG5G,wBAAwB,CAAC2G,UAAU,EAAEA,UAAU,CAACpO,MAAM,CAAC6F,IAAI,CAACuI,UAAU,CAAC,EAAE;IACtFxM,GAAG,EAAEwM,UAAU,CAACxM,GAAG,CAACiE,IAAI,CAACuI,UAAU,CAAC;IACpClP,MAAM,EAAEkP,UAAU,CAAClP,MAAM,CAAC2G,IAAI,CAACuI,UAAU,CAAC;IAC1CL,MAAM,EAAEK,UAAU,CAACL,MAAM,CAAClI,IAAI,CAACuI,UAAU,CAAC;IAC1CH,UAAU,EAAEG,UAAU,CAACH,UAAU,CAACpI,IAAI,CAACuI,UAAU;EACrD,CAAC,CAAC;EACF,OAAOC,QAAQ;AACnB;AACA,SAASC,kBAAkBA,CAAC3G,EAAE,EAAE;EAC5B,MAAMwD,IAAI,GAAGyC,eAAe;EAC5BA,eAAe,GAAGjG,EAAE;EACpB,OAAOwD,IAAI;AACf;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASnG,SAASA,CAACuJ,kBAAkB,EAAE;EACnC,MAAMjB,YAAY,GAAGrC,iBAAiB,CAAC,IAAI,CAAC;EAC5C;EACA;EACA,IAAI;IACA,OAAOsD,kBAAkB,CAAC,CAAC;EAC/B,CAAC,SACO;IACJtD,iBAAiB,CAACqC,YAAY,CAAC;EACnC;AACJ;AAEA,MAAMkB,eAAe,GAAGA,CAAA,KAAM,CAAE,CAAC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,KAAK,SAASrD,YAAY,CAAC;EAC7B7M,WAAWA,CAACmQ,KAAK,EAAEC,QAAQ,EAAEC,iBAAiB,EAAE;IAC5C,KAAK,CAAC,CAAC;IACP,IAAI,CAACF,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACE,KAAK,GAAG,KAAK;IAClB,IAAI,CAACC,SAAS,GAAGN,eAAe;IAChC,IAAI,CAACO,iBAAiB,GAAID,SAAS,IAAK;MACpC,IAAI,CAACA,SAAS,GAAGA,SAAS;IAC9B,CAAC;IACD,IAAI,CAACpC,yBAAyB,GAAGkC,iBAAiB;EACtD;EACAI,MAAMA,CAAA,EAAG;IACL,IAAI,CAAC,IAAI,CAACH,KAAK,EAAE;MACb,IAAI,CAACF,QAAQ,CAAC,IAAI,CAAC;IACvB;IACA,IAAI,CAACE,KAAK,GAAG,IAAI;EACrB;EACAxC,kCAAkCA,CAAA,EAAG;IACjC,IAAI,CAAC2C,MAAM,CAAC,CAAC;EACjB;EACApC,4BAA4BA,CAAA,EAAG;IAC3B;EAAA;EAEJ;AACJ;AACA;AACA;AACA;AACA;EACIqC,GAAGA,CAAA,EAAG;IACF,IAAI,CAACJ,KAAK,GAAG,KAAK;IAClB,IAAI,IAAI,CAACrD,eAAe,KAAK,CAAC,IAAI,CAAC,IAAI,CAACE,8BAA8B,CAAC,CAAC,EAAE;MACtE;IACJ;IACA,MAAM4B,YAAY,GAAGrC,iBAAiB,CAAC,IAAI,CAAC;IAC5C,IAAI,CAACO,eAAe,EAAE;IACtB,IAAI;MACA,IAAI,CAACsD,SAAS,CAAC,CAAC;MAChB,IAAI,CAACA,SAAS,GAAGN,eAAe;MAChC,IAAI,CAACE,KAAK,CAAC,IAAI,CAACK,iBAAiB,CAAC;IACtC,CAAC,SACO;MACJ9D,iBAAiB,CAACqC,YAAY,CAAC;IACnC;EACJ;EACA4B,OAAOA,CAAA,EAAG;IACN,IAAI,CAACJ,SAAS,CAAC,CAAC;EACpB;AACJ;AAEA,SAASzO,QAAQA,CAACyF,MAAM,EAAEE,OAAO,EAAE;EAC/B,MAAMmJ,eAAe,GAAG,CAACnJ,OAAO,EAAEK,aAAa;EAC/C8I,eAAe,IAAI,CAACnJ,OAAO,EAAEC,QAAQ,IAAItB,uEAAwB,CAACtE,QAAQ,CAAC;EAC3E,MAAM+O,UAAU,GAAGD,eAAe,GAAGnJ,OAAO,EAAEC,QAAQ,EAAEvH,GAAG,CAACmG,qDAAU,CAAC,IAAID,qDAAM,CAACC,qDAAU,CAAC,GAAG,IAAI;EACpG;EACA;EACA,IAAIwK,KAAK;EACT,IAAIrJ,OAAO,EAAEsJ,WAAW,EAAE;IACtB;IACAD,KAAK,GAAGnK,qDAAQ,CAAC;MAAEqK,IAAI,EAAE,CAAC,CAAC;IAAwB,CAAC,CAAC;EACzD,CAAC,MACI;IACD;IACAF,KAAK,GAAGnK,qDAAQ,CAAC;MAAEqK,IAAI,EAAE,CAAC,CAAC;MAAuB1M,KAAK,EAAEmD,OAAO,EAAEmI;IAAa,CAAC,CAAC;EACrF;EACA,MAAMqB,GAAG,GAAG1J,MAAM,CAAC2J,SAAS,CAAC;IACzB7M,IAAI,EAAEC,KAAK,IAAIwM,KAAK,CAACzN,GAAG,CAAC;MAAE2N,IAAI,EAAE,CAAC,CAAC;MAAuB1M;IAAM,CAAC,CAAC;IAClExD,KAAK,EAAEA,KAAK,IAAIgQ,KAAK,CAACzN,GAAG,CAAC;MAAE2N,IAAI,EAAE,CAAC,CAAC;MAAuBlQ;IAAM,CAAC;IAClE;IACA;EACJ,CAAC,CAAC;;EACF,IAAI6H,SAAS,IAAIlB,OAAO,EAAEsJ,WAAW,IAAItK,SAAS,CAACqK,KAAK,CAAC,CAACE,IAAI,KAAK,CAAC,CAAC,yBAAyB;IAC1F,MAAM,IAAI5I,YAAY,CAAC,GAAG,CAAC,uDAAuD,qFAAqF,CAAC;EAC5K;EACA;EACAyI,UAAU,EAAExJ,SAAS,CAAC4J,GAAG,CAACE,WAAW,CAAC7J,IAAI,CAAC2J,GAAG,CAAC,CAAC;EAChD;EACA;EACA,OAAOpK,uDAAU,CAAC,MAAM;IACpB,MAAMuK,OAAO,GAAGN,KAAK,CAAC,CAAC;IACvB,QAAQM,OAAO,CAACJ,IAAI;MAChB,KAAK,CAAC,CAAC;QACH,OAAOI,OAAO,CAAC9M,KAAK;MACxB,KAAK,CAAC,CAAC;QACH,MAAM8M,OAAO,CAACtQ,KAAK;MACvB,KAAK,CAAC,CAAC;QACH;QACA;QACA,MAAM,IAAIsH,YAAY,CAAC,GAAG,CAAC,uDAAuD,qFAAqF,CAAC;IAChL;EACJ,CAAC,CAAC;AACN;;AAEA;AACA;AACA","sources":["./src/app/services/http.service.ts","./src/app/services/product.service.ts","./node_modules/rxjs/dist/esm/internal/ReplaySubject.js","./node_modules/rxjs/dist/esm/internal/operators/shareReplay.js","./node_modules/rxjs/dist/esm/internal/scheduler/dateTimestampProvider.js","./node_modules/@angular/core/fesm2022/rxjs-interop.mjs"],"sourcesContent":["import { HttpClient } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { Observable, throwError } from \"rxjs\";\nimport { catchError } from \"rxjs/operators\";\n\nexport enum httpActions {\n  GET = \"GET\",\n  POST = \"POST\",\n  UPDATE = \"UPDATE\",\n  DELETE = \"DELETE\",\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HttpService {\n  protected readonly apiServer = \"\";\n  constructor(private httpClient: HttpClient) { }\n  public get<T>(url: string): Observable<T> {\n    return this.httpClient\n      .get<T>(this.apiServer + url)\n      .pipe(catchError(this.errorHandler));\n  }\n  public getById<T>(url: string, id: number | string): Observable<T> {\n    return this.httpClient\n      .get<T>(this.apiServer + url + id)\n      .pipe(catchError(this.errorHandler));\n  }\n  public post<T>(url: string, obj: T): Observable<T> {\n    return this.httpClient\n      .post<T>(this.apiServer + url, obj)\n      .pipe(catchError(this.errorHandler));\n  }\n  public update<T>(id: number | string, obj: T, url: string): Observable<T> {\n    return this.httpClient\n      .put<T>(this.apiServer + url + id, obj)\n      .pipe(catchError(this.errorHandler));\n  }\n  public delete<T>(id: number | string, url: string): Observable<T> {\n    return this.httpClient\n      .delete<T>(this.apiServer + url + id)\n      .pipe(catchError(this.errorHandler));\n  }\n  private errorHandler(error: any): Observable<any> {\n    let errorMessage = \"\";\n    if (error.error instanceof ErrorEvent) {\n      errorMessage = error.error;\n    } else {\n      errorMessage = error.error.msg;\n    }\n    return throwError(errorMessage);\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Injectable, Signal, signal } from '@angular/core';\nimport { HttpService } from './http.service';\nimport { map, shareReplay, tap } from 'rxjs/operators';\nimport { Citations } from '../interfaces/citations.model';\nimport { environment } from 'src/environments/environment';\nimport { toSignal } from '@angular/core/rxjs-interop';\nimport { CitationsDetails } from '../interfaces/citations.details';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProductService {\n\n  constructor(private http: HttpService) { }\n\n  private productUrl = `https://${environment.productBaseUrl}/api/citations/redistributions`;\n  private productDetailsUrl = `https://${environment.productBaseUrl}/api/citations/`;\n\n  // Signal stream of products\n  products = toSignal(this.getProducts$());\n  productDetails = signal<any | undefined>(undefined);\n\n  //observable stream of products\n  getProducts$(): Observable<Array<Citations>> {\n    return this.http.get<{ results: Array<Citations> }>(this.productUrl)\n      .pipe( map(data => data.results.filter(item => item.distribution === 'PUBLIC')),\n        map(data => data.sort((a, b) => new Date(b.redistributedDate).getTime() - new Date(a.redistributedDate).getTime())),\n        tap(data => this.logger(data)),\n        shareReplay(1)\n      );\n  }\n  getProductDetails$(id: number): Observable<CitationsDetails> {\n    return this.http.getById<CitationsDetails>(this.productDetailsUrl, id)\n      .pipe(tap(data => {\n        this.productDetails.set(data);\n        this.logger(data);\n      }),\n        shareReplay(1));\n  }\n\n  logger(data: any): void {\n    // To Do: replace with a logger service\n    console.info(JSON.stringify(data));\n  }\n\n}\n\n","import { Subject } from './Subject';\nimport { dateTimestampProvider } from './scheduler/dateTimestampProvider';\nexport class ReplaySubject extends Subject {\n    constructor(_bufferSize = Infinity, _windowTime = Infinity, _timestampProvider = dateTimestampProvider) {\n        super();\n        this._bufferSize = _bufferSize;\n        this._windowTime = _windowTime;\n        this._timestampProvider = _timestampProvider;\n        this._buffer = [];\n        this._infiniteTimeWindow = true;\n        this._infiniteTimeWindow = _windowTime === Infinity;\n        this._bufferSize = Math.max(1, _bufferSize);\n        this._windowTime = Math.max(1, _windowTime);\n    }\n    next(value) {\n        const { isStopped, _buffer, _infiniteTimeWindow, _timestampProvider, _windowTime } = this;\n        if (!isStopped) {\n            _buffer.push(value);\n            !_infiniteTimeWindow && _buffer.push(_timestampProvider.now() + _windowTime);\n        }\n        this._trimBuffer();\n        super.next(value);\n    }\n    _subscribe(subscriber) {\n        this._throwIfClosed();\n        this._trimBuffer();\n        const subscription = this._innerSubscribe(subscriber);\n        const { _infiniteTimeWindow, _buffer } = this;\n        const copy = _buffer.slice();\n        for (let i = 0; i < copy.length && !subscriber.closed; i += _infiniteTimeWindow ? 1 : 2) {\n            subscriber.next(copy[i]);\n        }\n        this._checkFinalizedStatuses(subscriber);\n        return subscription;\n    }\n    _trimBuffer() {\n        const { _bufferSize, _timestampProvider, _buffer, _infiniteTimeWindow } = this;\n        const adjustedBufferSize = (_infiniteTimeWindow ? 1 : 2) * _bufferSize;\n        _bufferSize < Infinity && adjustedBufferSize < _buffer.length && _buffer.splice(0, _buffer.length - adjustedBufferSize);\n        if (!_infiniteTimeWindow) {\n            const now = _timestampProvider.now();\n            let last = 0;\n            for (let i = 1; i < _buffer.length && _buffer[i] <= now; i += 2) {\n                last = i;\n            }\n            last && _buffer.splice(0, last + 1);\n        }\n    }\n}\n","import { ReplaySubject } from '../ReplaySubject';\nimport { share } from './share';\nexport function shareReplay(configOrBufferSize, windowTime, scheduler) {\n    let bufferSize;\n    let refCount = false;\n    if (configOrBufferSize && typeof configOrBufferSize === 'object') {\n        ({ bufferSize = Infinity, windowTime = Infinity, refCount = false, scheduler } = configOrBufferSize);\n    }\n    else {\n        bufferSize = (configOrBufferSize !== null && configOrBufferSize !== void 0 ? configOrBufferSize : Infinity);\n    }\n    return share({\n        connector: () => new ReplaySubject(bufferSize, windowTime, scheduler),\n        resetOnError: true,\n        resetOnComplete: false,\n        resetOnRefCountZero: refCount,\n    });\n}\n","export const dateTimestampProvider = {\n    now() {\n        return (dateTimestampProvider.delegate || Date).now();\n    },\n    delegate: undefined,\n};\n","/**\n * @license Angular v16.2.3\n * (c) 2010-2022 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { assertInInjectionContext, inject, DestroyRef, Injector, effect, untracked as untracked$1, signal as signal$1, computed as computed$1 } from '@angular/core';\nimport { Observable, ReplaySubject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n/**\n * Operator which completes the Observable when the calling context (component, directive, service,\n * etc) is destroyed.\n *\n * @param destroyRef optionally, the `DestroyRef` representing the current context. This can be\n *     passed explicitly to use `takeUntilDestroyed` outside of an [injection\n * context](guide/dependency-injection-context). Otherwise, the current `DestroyRef` is injected.\n *\n * @developerPreview\n */\nfunction takeUntilDestroyed(destroyRef) {\n    if (!destroyRef) {\n        assertInInjectionContext(takeUntilDestroyed);\n        destroyRef = inject(DestroyRef);\n    }\n    const destroyed$ = new Observable(observer => {\n        const unregisterFn = destroyRef.onDestroy(observer.next.bind(observer));\n        return unregisterFn;\n    });\n    return (source) => {\n        return source.pipe(takeUntil(destroyed$));\n    };\n}\n\n/**\n * Exposes the value of an Angular `Signal` as an RxJS `Observable`.\n *\n * The signal's value will be propagated into the `Observable`'s subscribers using an `effect`.\n *\n * `toObservable` must be called in an injection context unless an injector is provided via options.\n *\n * @developerPreview\n */\nfunction toObservable(source, options) {\n    !options?.injector && assertInInjectionContext(toObservable);\n    const injector = options?.injector ?? inject(Injector);\n    const subject = new ReplaySubject(1);\n    const watcher = effect(() => {\n        let value;\n        try {\n            value = source();\n        }\n        catch (err) {\n            untracked$1(() => subject.error(err));\n            return;\n        }\n        untracked$1(() => subject.next(value));\n    }, { injector, manualCleanup: true });\n    injector.get(DestroyRef).onDestroy(() => {\n        watcher.destroy();\n        subject.complete();\n    });\n    return subject.asObservable();\n}\n\n/**\n * Base URL for the error details page.\n *\n * Keep this constant in sync across:\n *  - packages/compiler-cli/src/ngtsc/diagnostics/src/error_details_base_url.ts\n *  - packages/core/src/error_details_base_url.ts\n */\nconst ERROR_DETAILS_PAGE_BASE_URL = 'https://angular.io/errors';\n/**\n * URL for the XSS security documentation.\n */\nconst XSS_SECURITY_URL = 'https://g.co/ng/security#xss';\n\n/**\n * Class that represents a runtime error.\n * Formats and outputs the error message in a consistent way.\n *\n * Example:\n * ```\n *  throw new RuntimeError(\n *    RuntimeErrorCode.INJECTOR_ALREADY_DESTROYED,\n *    ngDevMode && 'Injector has already been destroyed.');\n * ```\n *\n * Note: the `message` argument contains a descriptive error message as a string in development\n * mode (when the `ngDevMode` is defined). In production mode (after tree-shaking pass), the\n * `message` argument becomes `false`, thus we account for it in the typings and the runtime\n * logic.\n */\nclass RuntimeError extends Error {\n    constructor(code, message) {\n        super(formatRuntimeError(code, message));\n        this.code = code;\n    }\n}\n/**\n * Called to format a runtime error.\n * See additional info on the `message` argument type in the `RuntimeError` class description.\n */\nfunction formatRuntimeError(code, message) {\n    // Error code might be a negative number, which is a special marker that instructs the logic to\n    // generate a link to the error details page on angular.io.\n    // We also prepend `0` to non-compile-time errors.\n    const fullCode = `NG0${Math.abs(code)}`;\n    let errorMessage = `${fullCode}${message ? ': ' + message : ''}`;\n    if (ngDevMode && code < 0) {\n        const addPeriodSeparator = !errorMessage.match(/[.,;!?\\n]$/);\n        const separator = addPeriodSeparator ? '.' : '';\n        errorMessage =\n            `${errorMessage}${separator} Find more at ${ERROR_DETAILS_PAGE_BASE_URL}/${fullCode}`;\n    }\n    return errorMessage;\n}\n\n/**\n * Symbol used to tell `Signal`s apart from other functions.\n *\n * This can be used to auto-unwrap signals in various cases, or to auto-wrap non-signal values.\n */\nconst SIGNAL = Symbol('SIGNAL');\n/**\n * Checks if the given `value` is a reactive `Signal`.\n *\n * @developerPreview\n */\nfunction isSignal(value) {\n    return typeof value === 'function' && value[SIGNAL] !== undefined;\n}\n/**\n * Converts `fn` into a marked signal function (where `isSignal(fn)` will be `true`), and\n * potentially add some set of extra properties (passed as an object record `extraApi`).\n */\nfunction createSignalFromFunction(node, fn, extraApi = {}) {\n    fn[SIGNAL] = node;\n    // Copy properties from `extraApi` to `fn` to complete the desired API of the `Signal`.\n    return Object.assign(fn, extraApi);\n}\n/**\n * The default equality function used for `signal` and `computed`, which treats objects and arrays\n * as never equal, and all other primitive values using identity semantics.\n *\n * This allows signals to hold non-primitive values (arrays, objects, other collections) and still\n * propagate change notification upon explicit mutation without identity change.\n *\n * @developerPreview\n */\nfunction defaultEquals(a, b) {\n    // `Object.is` compares two values using identity semantics which is desired behavior for\n    // primitive values. If `Object.is` determines two values to be equal we need to make sure that\n    // those don't represent objects (we want to make sure that 2 objects are always considered\n    // \"unequal\"). The null check is needed for the special case of JavaScript reporting null values\n    // as objects (`typeof null === 'object'`).\n    return (a === null || typeof a !== 'object') && Object.is(a, b);\n}\n\nconst _global = globalThis;\n\nfunction ngDevModeResetPerfCounters() {\n    const locationString = typeof location !== 'undefined' ? location.toString() : '';\n    const newCounters = {\n        namedConstructors: locationString.indexOf('ngDevMode=namedConstructors') != -1,\n        firstCreatePass: 0,\n        tNode: 0,\n        tView: 0,\n        rendererCreateTextNode: 0,\n        rendererSetText: 0,\n        rendererCreateElement: 0,\n        rendererAddEventListener: 0,\n        rendererSetAttribute: 0,\n        rendererRemoveAttribute: 0,\n        rendererSetProperty: 0,\n        rendererSetClassName: 0,\n        rendererAddClass: 0,\n        rendererRemoveClass: 0,\n        rendererSetStyle: 0,\n        rendererRemoveStyle: 0,\n        rendererDestroy: 0,\n        rendererDestroyNode: 0,\n        rendererMoveNode: 0,\n        rendererRemoveNode: 0,\n        rendererAppendChild: 0,\n        rendererInsertBefore: 0,\n        rendererCreateComment: 0,\n        hydratedNodes: 0,\n        hydratedComponents: 0,\n        dehydratedViewsRemoved: 0,\n        dehydratedViewsCleanupRuns: 0,\n        componentsSkippedHydration: 0,\n    };\n    // Make sure to refer to ngDevMode as ['ngDevMode'] for closure.\n    const allowNgDevModeTrue = locationString.indexOf('ngDevMode=false') === -1;\n    _global['ngDevMode'] = allowNgDevModeTrue && newCounters;\n    return newCounters;\n}\n/**\n * This function checks to see if the `ngDevMode` has been set. If yes,\n * then we honor it, otherwise we default to dev mode with additional checks.\n *\n * The idea is that unless we are doing production build where we explicitly\n * set `ngDevMode == false` we should be helping the developer by providing\n * as much early warning and errors as possible.\n *\n * `ɵɵdefineComponent` is guaranteed to have been called before any component template functions\n * (and thus Ivy instructions), so a single initialization there is sufficient to ensure ngDevMode\n * is defined for the entire instruction set.\n *\n * When checking `ngDevMode` on toplevel, always init it before referencing it\n * (e.g. `((typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode())`), otherwise you can\n *  get a `ReferenceError` like in https://github.com/angular/angular/issues/31595.\n *\n * Details on possible values for `ngDevMode` can be found on its docstring.\n *\n * NOTE:\n * - changes to the `ngDevMode` name must be synced with `compiler-cli/src/tooling.ts`.\n */\nfunction initNgDevMode() {\n    // The below checks are to ensure that calling `initNgDevMode` multiple times does not\n    // reset the counters.\n    // If the `ngDevMode` is not an object, then it means we have not created the perf counters\n    // yet.\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        if (typeof ngDevMode !== 'object') {\n            ngDevModeResetPerfCounters();\n        }\n        return typeof ngDevMode !== 'undefined' && !!ngDevMode;\n    }\n    return false;\n}\n\n// Required as the signals library is in a separate package, so we need to explicitly ensure the\n/**\n * A `WeakRef`-compatible reference that fakes the API with a strong reference\n * internally.\n */\nclass LeakyRef {\n    constructor(ref) {\n        this.ref = ref;\n    }\n    deref() {\n        return this.ref;\n    }\n}\n// `WeakRef` is not always defined in every TS environment where Angular is compiled. Instead,\n// read it off of the global context if available.\n// tslint:disable-next-line: no-toplevel-property-access\nlet WeakRefImpl = _global['WeakRef'] ?? LeakyRef;\nfunction newWeakRef(value) {\n    if (typeof ngDevMode !== 'undefined' && ngDevMode && WeakRefImpl === undefined) {\n        throw new Error(`Angular requires a browser which supports the 'WeakRef' API`);\n    }\n    return new WeakRefImpl(value);\n}\nfunction setAlternateWeakRefImpl(impl) {\n    // no-op since the alternate impl is included by default by the framework. Remove once internal\n    // migration is complete.\n}\n\n// Required as the signals library is in a separate package, so we need to explicitly ensure the\n/**\n * Counter tracking the next `ProducerId` or `ConsumerId`.\n */\nlet _nextReactiveId = 0;\n/**\n * Tracks the currently active reactive consumer (or `null` if there is no active\n * consumer).\n */\nlet activeConsumer = null;\n/**\n * Whether the graph is currently propagating change notifications.\n */\nlet inNotificationPhase = false;\nfunction setActiveConsumer(consumer) {\n    const prev = activeConsumer;\n    activeConsumer = consumer;\n    return prev;\n}\n/**\n * A node in the reactive graph.\n *\n * Nodes can be producers of reactive values, consumers of other reactive values, or both.\n *\n * Producers are nodes that produce values, and can be depended upon by consumer nodes.\n *\n * Producers expose a monotonic `valueVersion` counter, and are responsible for incrementing this\n * version when their value semantically changes. Some producers may produce their values lazily and\n * thus at times need to be polled for potential updates to their value (and by extension their\n * `valueVersion`). This is accomplished via the `onProducerUpdateValueVersion` method for\n * implemented by producers, which should perform whatever calculations are necessary to ensure\n * `valueVersion` is up to date.\n *\n * Consumers are nodes that depend on the values of producers and are notified when those values\n * might have changed.\n *\n * Consumers do not wrap the reads they consume themselves, but rather can be set as the active\n * reader via `setActiveConsumer`. Reads of producers that happen while a consumer is active will\n * result in those producers being added as dependencies of that consumer node.\n *\n * The set of dependencies of a consumer is dynamic. Implementers expose a monotonically increasing\n * `trackingVersion` counter, which increments whenever the consumer is about to re-run any reactive\n * reads it needs and establish a new set of dependencies as a result.\n *\n * Producers store the last `trackingVersion` they've seen from `Consumer`s which have read them.\n * This allows a producer to identify whether its record of the dependency is current or stale, by\n * comparing the consumer's `trackingVersion` to the version at which the dependency was\n * last observed.\n */\nclass ReactiveNode {\n    constructor() {\n        this.id = _nextReactiveId++;\n        /**\n         * A cached weak reference to this node, which will be used in `ReactiveEdge`s.\n         */\n        this.ref = newWeakRef(this);\n        /**\n         * Edges to producers on which this node depends (in its consumer capacity).\n         */\n        this.producers = new Map();\n        /**\n         * Edges to consumers on which this node depends (in its producer capacity).\n         */\n        this.consumers = new Map();\n        /**\n         * Monotonically increasing counter representing a version of this `Consumer`'s\n         * dependencies.\n         */\n        this.trackingVersion = 0;\n        /**\n         * Monotonically increasing counter which increases when the value of this `Producer`\n         * semantically changes.\n         */\n        this.valueVersion = 0;\n    }\n    /**\n     * Polls dependencies of a consumer to determine if they have actually changed.\n     *\n     * If this returns `false`, then even though the consumer may have previously been notified of a\n     * change, the values of its dependencies have not actually changed and the consumer should not\n     * rerun any reactions.\n     */\n    consumerPollProducersForChange() {\n        for (const [producerId, edge] of this.producers) {\n            const producer = edge.producerNode.deref();\n            // On Safari < 16.1 deref can return null, we need to check for null also.\n            // See https://github.com/WebKit/WebKit/commit/44c15ba58912faab38b534fef909dd9e13e095e0\n            if (producer == null || edge.atTrackingVersion !== this.trackingVersion) {\n                // This dependency edge is stale, so remove it.\n                this.producers.delete(producerId);\n                producer?.consumers.delete(this.id);\n                continue;\n            }\n            if (producer.producerPollStatus(edge.seenValueVersion)) {\n                // One of the dependencies reports a real value change.\n                return true;\n            }\n        }\n        // No dependency reported a real value change, so the `Consumer` has also not been\n        // impacted.\n        return false;\n    }\n    /**\n     * Notify all consumers of this producer that its value may have changed.\n     */\n    producerMayHaveChanged() {\n        // Prevent signal reads when we're updating the graph\n        const prev = inNotificationPhase;\n        inNotificationPhase = true;\n        try {\n            for (const [consumerId, edge] of this.consumers) {\n                const consumer = edge.consumerNode.deref();\n                // On Safari < 16.1 deref can return null, we need to check for null also.\n                // See https://github.com/WebKit/WebKit/commit/44c15ba58912faab38b534fef909dd9e13e095e0\n                if (consumer == null || consumer.trackingVersion !== edge.atTrackingVersion) {\n                    this.consumers.delete(consumerId);\n                    consumer?.producers.delete(this.id);\n                    continue;\n                }\n                consumer.onConsumerDependencyMayHaveChanged();\n            }\n        }\n        finally {\n            inNotificationPhase = prev;\n        }\n    }\n    /**\n     * Mark that this producer node has been accessed in the current reactive context.\n     */\n    producerAccessed() {\n        if (inNotificationPhase) {\n            throw new Error(typeof ngDevMode !== 'undefined' && ngDevMode ?\n                `Assertion error: signal read during notification phase` :\n                '');\n        }\n        if (activeConsumer === null) {\n            return;\n        }\n        // Either create or update the dependency `Edge` in both directions.\n        let edge = activeConsumer.producers.get(this.id);\n        if (edge === undefined) {\n            edge = {\n                consumerNode: activeConsumer.ref,\n                producerNode: this.ref,\n                seenValueVersion: this.valueVersion,\n                atTrackingVersion: activeConsumer.trackingVersion,\n            };\n            activeConsumer.producers.set(this.id, edge);\n            this.consumers.set(activeConsumer.id, edge);\n        }\n        else {\n            edge.seenValueVersion = this.valueVersion;\n            edge.atTrackingVersion = activeConsumer.trackingVersion;\n        }\n    }\n    /**\n     * Whether this consumer currently has any producers registered.\n     */\n    get hasProducers() {\n        return this.producers.size > 0;\n    }\n    /**\n     * Whether this `ReactiveNode` in its producer capacity is currently allowed to initiate updates,\n     * based on the current consumer context.\n     */\n    get producerUpdatesAllowed() {\n        return activeConsumer?.consumerAllowSignalWrites !== false;\n    }\n    /**\n     * Checks if a `Producer` has a current value which is different than the value\n     * last seen at a specific version by a `Consumer` which recorded a dependency on\n     * this `Producer`.\n     */\n    producerPollStatus(lastSeenValueVersion) {\n        // `producer.valueVersion` may be stale, but a mismatch still means that the value\n        // last seen by the `Consumer` is also stale.\n        if (this.valueVersion !== lastSeenValueVersion) {\n            return true;\n        }\n        // Trigger the `Producer` to update its `valueVersion` if necessary.\n        this.onProducerUpdateValueVersion();\n        // At this point, we can trust `producer.valueVersion`.\n        return this.valueVersion !== lastSeenValueVersion;\n    }\n}\n\n/**\n * Create a computed `Signal` which derives a reactive value from an expression.\n *\n * @developerPreview\n */\nfunction computed(computation, options) {\n    const node = new ComputedImpl(computation, options?.equal ?? defaultEquals);\n    // Casting here is required for g3, as TS inference behavior is slightly different between our\n    // version/options and g3's.\n    return createSignalFromFunction(node, node.signal.bind(node));\n}\n/**\n * A dedicated symbol used before a computed value has been calculated for the first time.\n * Explicitly typed as `any` so we can use it as signal's value.\n */\nconst UNSET = Symbol('UNSET');\n/**\n * A dedicated symbol used in place of a computed signal value to indicate that a given computation\n * is in progress. Used to detect cycles in computation chains.\n * Explicitly typed as `any` so we can use it as signal's value.\n */\nconst COMPUTING = Symbol('COMPUTING');\n/**\n * A dedicated symbol used in place of a computed signal value to indicate that a given computation\n * failed. The thrown error is cached until the computation gets dirty again.\n * Explicitly typed as `any` so we can use it as signal's value.\n */\nconst ERRORED = Symbol('ERRORED');\n/**\n * A computation, which derives a value from a declarative reactive expression.\n *\n * `Computed`s are both producers and consumers of reactivity.\n */\nclass ComputedImpl extends ReactiveNode {\n    constructor(computation, equal) {\n        super();\n        this.computation = computation;\n        this.equal = equal;\n        /**\n         * Current value of the computation.\n         *\n         * This can also be one of the special values `UNSET`, `COMPUTING`, or `ERRORED`.\n         */\n        this.value = UNSET;\n        /**\n         * If `value` is `ERRORED`, the error caught from the last computation attempt which will\n         * be re-thrown.\n         */\n        this.error = null;\n        /**\n         * Flag indicating that the computation is currently stale, meaning that one of the\n         * dependencies has notified of a potential change.\n         *\n         * It's possible that no dependency has _actually_ changed, in which case the `stale`\n         * state can be resolved without recomputing the value.\n         */\n        this.stale = true;\n        this.consumerAllowSignalWrites = false;\n    }\n    onConsumerDependencyMayHaveChanged() {\n        if (this.stale) {\n            // We've already notified consumers that this value has potentially changed.\n            return;\n        }\n        // Record that the currently cached value may be stale.\n        this.stale = true;\n        // Notify any consumers about the potential change.\n        this.producerMayHaveChanged();\n    }\n    onProducerUpdateValueVersion() {\n        if (!this.stale) {\n            // The current value and its version are already up to date.\n            return;\n        }\n        // The current value is stale. Check whether we need to produce a new one.\n        if (this.value !== UNSET && this.value !== COMPUTING &&\n            !this.consumerPollProducersForChange()) {\n            // Even though we were previously notified of a potential dependency update, all of\n            // our dependencies report that they have not actually changed in value, so we can\n            // resolve the stale state without needing to recompute the current value.\n            this.stale = false;\n            return;\n        }\n        // The current value is stale, and needs to be recomputed. It still may not change -\n        // that depends on whether the newly computed value is equal to the old.\n        this.recomputeValue();\n    }\n    recomputeValue() {\n        if (this.value === COMPUTING) {\n            // Our computation somehow led to a cyclic read of itself.\n            throw new Error('Detected cycle in computations.');\n        }\n        const oldValue = this.value;\n        this.value = COMPUTING;\n        // As we're re-running the computation, update our dependent tracking version number.\n        this.trackingVersion++;\n        const prevConsumer = setActiveConsumer(this);\n        let newValue;\n        try {\n            newValue = this.computation();\n        }\n        catch (err) {\n            newValue = ERRORED;\n            this.error = err;\n        }\n        finally {\n            setActiveConsumer(prevConsumer);\n        }\n        this.stale = false;\n        if (oldValue !== UNSET && oldValue !== ERRORED && newValue !== ERRORED &&\n            this.equal(oldValue, newValue)) {\n            // No change to `valueVersion` - old and new values are\n            // semantically equivalent.\n            this.value = oldValue;\n            return;\n        }\n        this.value = newValue;\n        this.valueVersion++;\n    }\n    signal() {\n        // Check if the value needs updating before returning it.\n        this.onProducerUpdateValueVersion();\n        // Record that someone looked at this signal.\n        this.producerAccessed();\n        if (this.value === ERRORED) {\n            throw this.error;\n        }\n        return this.value;\n    }\n}\n\nfunction defaultThrowError() {\n    throw new Error();\n}\nlet throwInvalidWriteToSignalErrorFn = defaultThrowError;\nfunction throwInvalidWriteToSignalError() {\n    throwInvalidWriteToSignalErrorFn();\n}\nfunction setThrowInvalidWriteToSignalError(fn) {\n    throwInvalidWriteToSignalErrorFn = fn;\n}\n\n/**\n * If set, called after `WritableSignal`s are updated.\n *\n * This hook can be used to achieve various effects, such as running effects synchronously as part\n * of setting a signal.\n */\nlet postSignalSetFn = null;\nclass WritableSignalImpl extends ReactiveNode {\n    constructor(value, equal) {\n        super();\n        this.value = value;\n        this.equal = equal;\n        this.consumerAllowSignalWrites = false;\n    }\n    onConsumerDependencyMayHaveChanged() {\n        // This never happens for writable signals as they're not consumers.\n    }\n    onProducerUpdateValueVersion() {\n        // Writable signal value versions are always up to date.\n    }\n    /**\n     * Directly update the value of the signal to a new value, which may or may not be\n     * equal to the previous.\n     *\n     * In the event that `newValue` is semantically equal to the current value, `set` is\n     * a no-op.\n     */\n    set(newValue) {\n        if (!this.producerUpdatesAllowed) {\n            throwInvalidWriteToSignalError();\n        }\n        if (!this.equal(this.value, newValue)) {\n            this.value = newValue;\n            this.valueVersion++;\n            this.producerMayHaveChanged();\n            postSignalSetFn?.();\n        }\n    }\n    /**\n     * Derive a new value for the signal from its current value using the `updater` function.\n     *\n     * This is equivalent to calling `set` on the result of running `updater` on the current\n     * value.\n     */\n    update(updater) {\n        if (!this.producerUpdatesAllowed) {\n            throwInvalidWriteToSignalError();\n        }\n        this.set(updater(this.value));\n    }\n    /**\n     * Calls `mutator` on the current value and assumes that it has been mutated.\n     */\n    mutate(mutator) {\n        if (!this.producerUpdatesAllowed) {\n            throwInvalidWriteToSignalError();\n        }\n        // Mutate bypasses equality checks as it's by definition changing the value.\n        mutator(this.value);\n        this.valueVersion++;\n        this.producerMayHaveChanged();\n        postSignalSetFn?.();\n    }\n    asReadonly() {\n        if (this.readonlySignal === undefined) {\n            this.readonlySignal = createSignalFromFunction(this, () => this.signal());\n        }\n        return this.readonlySignal;\n    }\n    signal() {\n        this.producerAccessed();\n        return this.value;\n    }\n}\n/**\n * Create a `Signal` that can be set or updated directly.\n *\n * @developerPreview\n */\nfunction signal(initialValue, options) {\n    const signalNode = new WritableSignalImpl(initialValue, options?.equal ?? defaultEquals);\n    // Casting here is required for g3, as TS inference behavior is slightly different between our\n    // version/options and g3's.\n    const signalFn = createSignalFromFunction(signalNode, signalNode.signal.bind(signalNode), {\n        set: signalNode.set.bind(signalNode),\n        update: signalNode.update.bind(signalNode),\n        mutate: signalNode.mutate.bind(signalNode),\n        asReadonly: signalNode.asReadonly.bind(signalNode)\n    });\n    return signalFn;\n}\nfunction setPostSignalSetFn(fn) {\n    const prev = postSignalSetFn;\n    postSignalSetFn = fn;\n    return prev;\n}\n\n/**\n * Execute an arbitrary function in a non-reactive (non-tracking) context. The executed function\n * can, optionally, return a value.\n *\n * @developerPreview\n */\nfunction untracked(nonReactiveReadsFn) {\n    const prevConsumer = setActiveConsumer(null);\n    // We are not trying to catch any particular errors here, just making sure that the consumers\n    // stack is restored in case of errors.\n    try {\n        return nonReactiveReadsFn();\n    }\n    finally {\n        setActiveConsumer(prevConsumer);\n    }\n}\n\nconst NOOP_CLEANUP_FN = () => { };\n/**\n * Watches a reactive expression and allows it to be scheduled to re-run\n * when any dependencies notify of a change.\n *\n * `Watch` doesn't run reactive expressions itself, but relies on a consumer-\n * provided scheduling operation to coordinate calling `Watch.run()`.\n */\nclass Watch extends ReactiveNode {\n    constructor(watch, schedule, allowSignalWrites) {\n        super();\n        this.watch = watch;\n        this.schedule = schedule;\n        this.dirty = false;\n        this.cleanupFn = NOOP_CLEANUP_FN;\n        this.registerOnCleanup = (cleanupFn) => {\n            this.cleanupFn = cleanupFn;\n        };\n        this.consumerAllowSignalWrites = allowSignalWrites;\n    }\n    notify() {\n        if (!this.dirty) {\n            this.schedule(this);\n        }\n        this.dirty = true;\n    }\n    onConsumerDependencyMayHaveChanged() {\n        this.notify();\n    }\n    onProducerUpdateValueVersion() {\n        // Watches are not producers.\n    }\n    /**\n     * Execute the reactive expression in the context of this `Watch` consumer.\n     *\n     * Should be called by the user scheduling algorithm when the provided\n     * `schedule` hook is called by `Watch`.\n     */\n    run() {\n        this.dirty = false;\n        if (this.trackingVersion !== 0 && !this.consumerPollProducersForChange()) {\n            return;\n        }\n        const prevConsumer = setActiveConsumer(this);\n        this.trackingVersion++;\n        try {\n            this.cleanupFn();\n            this.cleanupFn = NOOP_CLEANUP_FN;\n            this.watch(this.registerOnCleanup);\n        }\n        finally {\n            setActiveConsumer(prevConsumer);\n        }\n    }\n    cleanup() {\n        this.cleanupFn();\n    }\n}\n\nfunction toSignal(source, options) {\n    const requiresCleanup = !options?.manualCleanup;\n    requiresCleanup && !options?.injector && assertInInjectionContext(toSignal);\n    const cleanupRef = requiresCleanup ? options?.injector?.get(DestroyRef) ?? inject(DestroyRef) : null;\n    // Note: T is the Observable value type, and U is the initial value type. They don't have to be\n    // the same - the returned signal gives values of type `T`.\n    let state;\n    if (options?.requireSync) {\n        // Initially the signal is in a `NoValue` state.\n        state = signal$1({ kind: 0 /* StateKind.NoValue */ });\n    }\n    else {\n        // If an initial value was passed, use it. Otherwise, use `undefined` as the initial value.\n        state = signal$1({ kind: 1 /* StateKind.Value */, value: options?.initialValue });\n    }\n    const sub = source.subscribe({\n        next: value => state.set({ kind: 1 /* StateKind.Value */, value }),\n        error: error => state.set({ kind: 2 /* StateKind.Error */, error }),\n        // Completion of the Observable is meaningless to the signal. Signals don't have a concept of\n        // \"complete\".\n    });\n    if (ngDevMode && options?.requireSync && untracked(state).kind === 0 /* StateKind.NoValue */) {\n        throw new RuntimeError(601 /* RuntimeErrorCode.REQUIRE_SYNC_WITHOUT_SYNC_EMIT */, '`toSignal()` called with `requireSync` but `Observable` did not emit synchronously.');\n    }\n    // Unsubscribe when the current context is destroyed, if requested.\n    cleanupRef?.onDestroy(sub.unsubscribe.bind(sub));\n    // The actual returned signal is a `computed` of the `State` signal, which maps the various states\n    // to either values or errors.\n    return computed$1(() => {\n        const current = state();\n        switch (current.kind) {\n            case 1 /* StateKind.Value */:\n                return current.value;\n            case 2 /* StateKind.Error */:\n                throw current.error;\n            case 0 /* StateKind.NoValue */:\n                // This shouldn't really happen because the error is thrown on creation.\n                // TODO(alxhub): use a RuntimeError when we finalize the error semantics\n                throw new RuntimeError(601 /* RuntimeErrorCode.REQUIRE_SYNC_WITHOUT_SYNC_EMIT */, '`toSignal()` called with `requireSync` but `Observable` did not emit synchronously.');\n        }\n    });\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { takeUntilDestroyed, toObservable, toSignal };\n"],"names":["throwError","catchError","httpActions","HttpService","constructor","httpClient","apiServer","get","url","pipe","errorHandler","getById","id","post","obj","update","put","delete","error","errorMessage","ErrorEvent","msg","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn","signal","map","shareReplay","tap","environment","toSignal","ProductService","http","productUrl","productBaseUrl","productDetailsUrl","products","getProducts$","productDetails","undefined","data","results","filter","item","distribution","sort","a","b","Date","redistributedDate","getTime","logger","getProductDetails$","set","console","info","JSON","stringify","Subject","dateTimestampProvider","ReplaySubject","_bufferSize","Infinity","_windowTime","_timestampProvider","_buffer","_infiniteTimeWindow","Math","max","next","value","isStopped","push","now","_trimBuffer","_subscribe","subscriber","_throwIfClosed","subscription","_innerSubscribe","copy","slice","i","length","closed","_checkFinalizedStatuses","adjustedBufferSize","splice","last","share","configOrBufferSize","windowTime","scheduler","bufferSize","refCount","connector","resetOnError","resetOnComplete","resetOnRefCountZero","delegate","assertInInjectionContext","inject","DestroyRef","Injector","effect","untracked","untracked$1","signal$1","computed","computed$1","Observable","takeUntil","takeUntilDestroyed","destroyRef","destroyed$","observer","unregisterFn","onDestroy","bind","source","toObservable","options","injector","subject","watcher","err","manualCleanup","destroy","complete","asObservable","ERROR_DETAILS_PAGE_BASE_URL","XSS_SECURITY_URL","RuntimeError","Error","code","message","formatRuntimeError","fullCode","abs","ngDevMode","addPeriodSeparator","match","separator","SIGNAL","Symbol","isSignal","createSignalFromFunction","node","fn","extraApi","Object","assign","defaultEquals","is","_global","globalThis","ngDevModeResetPerfCounters","locationString","location","toString","newCounters","namedConstructors","indexOf","firstCreatePass","tNode","tView","rendererCreateTextNode","rendererSetText","rendererCreateElement","rendererAddEventListener","rendererSetAttribute","rendererRemoveAttribute","rendererSetProperty","rendererSetClassName","rendererAddClass","rendererRemoveClass","rendererSetStyle","rendererRemoveStyle","rendererDestroy","rendererDestroyNode","rendererMoveNode","rendererRemoveNode","rendererAppendChild","rendererInsertBefore","rendererCreateComment","hydratedNodes","hydratedComponents","dehydratedViewsRemoved","dehydratedViewsCleanupRuns","componentsSkippedHydration","allowNgDevModeTrue","initNgDevMode","LeakyRef","ref","deref","WeakRefImpl","newWeakRef","setAlternateWeakRefImpl","impl","_nextReactiveId","activeConsumer","inNotificationPhase","setActiveConsumer","consumer","prev","ReactiveNode","producers","Map","consumers","trackingVersion","valueVersion","consumerPollProducersForChange","producerId","edge","producer","producerNode","atTrackingVersion","producerPollStatus","seenValueVersion","producerMayHaveChanged","consumerId","consumerNode","onConsumerDependencyMayHaveChanged","producerAccessed","hasProducers","size","producerUpdatesAllowed","consumerAllowSignalWrites","lastSeenValueVersion","onProducerUpdateValueVersion","computation","ComputedImpl","equal","UNSET","COMPUTING","ERRORED","stale","recomputeValue","oldValue","prevConsumer","newValue","defaultThrowError","throwInvalidWriteToSignalErrorFn","throwInvalidWriteToSignalError","setThrowInvalidWriteToSignalError","postSignalSetFn","WritableSignalImpl","updater","mutate","mutator","asReadonly","readonlySignal","initialValue","signalNode","signalFn","setPostSignalSetFn","nonReactiveReadsFn","NOOP_CLEANUP_FN","Watch","watch","schedule","allowSignalWrites","dirty","cleanupFn","registerOnCleanup","notify","run","cleanup","requiresCleanup","cleanupRef","state","requireSync","kind","sub","subscribe","unsubscribe","current"],"sourceRoot":"webpack:///","x_google_ignoreList":[2,3,4,5]}